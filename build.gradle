buildscript {
    repositories {
        maven { url = "https://files.minecraftforge.net/maven" }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        // MixinGradle:
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'org.spongepowered.mixin'

version = project.mod_version
group = project.maven_group
archivesBaseName = project.mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(project.java_target)

compileJava.options.compilerArgs.add '-parameters'

repositories {
	maven {
		url "https://www.cursemaven.com"
	}
	maven {
		url = "https://repo.spongepowered.org/maven"
	}
}

dependencies {
	minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
	annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

processResources {
	inputs.property "version", project.version

	filesMatching(["META-INF/mods.toml", "pack.mcmeta"]) {
		expand project.properties
	}

	exclude "**/*.pdn"

	//rename "^modid.mixins.json\$", "${project.mod_id}.mixins.json"
	//rename "^icon.png\$", "${project.mod_id}.png"
}

minecraft {
    mappings channel: 'official', version: project.minecraft_version
    
    runs {
        client {
            workingDirectory project.file('run')
            
            property "forge.logging.markers", "REGISTRIES"
            
            mods {
                locked {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            
            property "forge.logging.markers", "REGISTRIES"
            
            mods {
                locked {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            
            property "forge.logging.markers", "REGISTRIES"
            
            args '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            
            mods {
                locked {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
	// MixinGradle Settings
	add sourceSets.main, "${project.mod_id}.mixins.refmap.json"
	config "${project.mod_id}.mixins.json"

	debug.verbose = true
	debug.export = true
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    group = "documentation"
    classifier = "javadoc"
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    group = "documentation"
    classifier = 'sources'
    from sourceSets.main.allSource
}

task prepareDataResources(type: Sync) {
    from file("src/main/resources")
    into "$buildDir/data_resources"
    inputs.property "version", version

    filesMatching(["META-INF/mods.toml", "pack.mcmeta"]) {
        expand project.properties
    }

    exclude "**/*.pdn"

    //rename "^modid.mixins.json\$", "${project.mod_id}.mixins.json"
    //rename "^icon.png\$", "${project.mod_id}.png"
}

// Run prepareDataResources before prepareRunData
tasks.whenTaskAdded {
    if(it.name == "prepareRunData")
        it.dependsOn "prepareDataResources"
}